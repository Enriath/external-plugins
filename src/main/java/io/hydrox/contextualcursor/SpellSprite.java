/*
 * Copyright (c) 2019-2022 Enriath <ikada@protonmail.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.hydrox.contextualcursor;

import lombok.AllArgsConstructor;
import net.runelite.api.SpriteID;
import java.util.HashMap;
import java.util.Map;

@AllArgsConstructor
public enum SpellSprite
{
	// Standard
	WIND_STRIKE(SpriteID.SPELL_WIND_STRIKE),
	CONFUSE(SpriteID.SPELL_CONFUSE),
	WATER_STRIKE(SpriteID.SPELL_WATER_STRIKE),
	LVL_1_ENCHANT("lvl-1 enchant", SpriteID.SPELL_LVL_1_ENCHANT),
	EARTH_STRIKE(SpriteID.SPELL_EARTH_STRIKE),
	WEAKEN(SpriteID.SPELL_WEAKEN),
	FIRE_STRIKE(SpriteID.SPELL_FIRE_STRIKE),
	WIND_BOLT(SpriteID.SPELL_WIND_BOLT),
	CURSE(SpriteID.SPELL_CURSE),
	BIND(SpriteID.SPELL_BIND),
	LOW_LEVEL_ALCHEMY(SpriteID.SPELL_LOW_LEVEL_ALCHEMY),
	WATER_BOLT(SpriteID.SPELL_WATER_BOLT),
	LVL_2_ENCHANT("lvl-2 enchant", SpriteID.SPELL_LVL_2_ENCHANT),
	EARTH_BOLT(SpriteID.SPELL_EARTH_BOLT),
	TELEKINETIC_GRAB(SpriteID.SPELL_TELEKINETIC_GRAB),
	FIRE_BOLT(SpriteID.SPELL_FIRE_BOLT),
	CRUMBLE_UNDEAD(SpriteID.SPELL_CRUMBLE_UNDEAD),
	WIND_BLAST(SpriteID.SPELL_WIND_BLAST),
	SUPERHEAT_ITEM(SpriteID.SPELL_SUPERHEAT_ITEM),
	WATER_BLAST(SpriteID.SPELL_WATER_BLAST),
	LVL_3_ENCHANT("lvl-3 enchant", SpriteID.SPELL_LVL_3_ENCHANT),
	IBAN_BLAST(SpriteID.SPELL_IBAN_BLAST),
	SNARE(SpriteID.SPELL_SNARE),
	MAGIC_DART(SpriteID.SPELL_MAGIC_DART),
	EARTH_BLAST(SpriteID.SPELL_EARTH_BLAST),
	HIGH_LEVEL_ALCHEMY(SpriteID.SPELL_HIGH_LEVEL_ALCHEMY),
	CHARGE_WATER_ORB(SpriteID.SPELL_CHARGE_WATER_ORB),
	LVL_4_ENCHANT("lvl-4 enchant", SpriteID.SPELL_LVL_4_ENCHANT),
	FIRE_BLAST(SpriteID.SPELL_FIRE_BLAST),
	CHARGE_EARTH_ORB(SpriteID.SPELL_CHARGE_EARTH_ORB),
	SARADOMIN_STRIKE(SpriteID.SPELL_SARADOMIN_STRIKE),
	CLAWS_OF_GUTHIX(SpriteID.SPELL_CLAWS_OF_GUTHIX),
	FLAMES_OF_ZAMORAK(SpriteID.SPELL_FLAMES_OF_ZAMORAK),
	WIND_WAVE(SpriteID.SPELL_WIND_WAVE),
	CHARGE_FIRE_ORB(SpriteID.SPELL_CHARGE_FIRE_ORB),
	WATER_WAVE(SpriteID.SPELL_WATER_WAVE),
	CHARGE_AIR_ORB(SpriteID.SPELL_CHARGE_AIR_ORB),
	VULNERABILITY(SpriteID.SPELL_VULNERABILITY),
	LVL_5_ENCHANT("lvl-5 enchant", SpriteID.SPELL_LVL_5_ENCHANT),
	EARTH_WAVE(SpriteID.SPELL_EARTH_WAVE),
	ENFEEBLE(SpriteID.SPELL_ENFEEBLE),
	TELEOTHER_LUMBRIDGE(SpriteID.SPELL_TELEOTHER_LUMBRIDGE),
	FIRE_WAVE(SpriteID.SPELL_FIRE_WAVE),
	ENTANGLE(SpriteID.SPELL_ENTANGLE),
	STUN(SpriteID.SPELL_STUN),
	WIND_SURGE(SpriteID.SPELL_WIND_SURGE),
	TELEOTHER_FALADOR(SpriteID.SPELL_TELEOTHER_FALADOR),
	WATER_SURGE(SpriteID.SPELL_WATER_SURGE),
	TELE_BLOCK(SpriteID.SPELL_TELE_BLOCK),
	LVL_6_ENCHANT("lvl-6 enchant", SpriteID.SPELL_LVL_6_ENCHANT),
	TELEOTHER_CAMELOT(SpriteID.SPELL_TELEOTHER_CAMELOT),
	EARTH_SURGE(SpriteID.SPELL_EARTH_SURGE),
	LVL_7_ENCHANT("lvl-7 enchant", SpriteID.SPELL_LVL_7_ENCHANT),
	FIRE_SURGE(SpriteID.SPELL_FIRE_SURGE),
	// Ancients
	SMOKE_RUSH(SpriteID.SPELL_SMOKE_RUSH),
	SHADOW_RUSH(SpriteID.SPELL_SHADOW_RUSH),
	BLOOD_RUSH(SpriteID.SPELL_BLOOD_RUSH),
	ICE_RUSH(SpriteID.SPELL_ICE_RUSH),
	SMOKE_BURST(SpriteID.SPELL_SMOKE_BURST),
	SHADOW_BURST(SpriteID.SPELL_SHADOW_BURST),
	BLOOD_BURST(SpriteID.SPELL_BLOOD_BURST),
	ICE_BURST(SpriteID.SPELL_ICE_BURST),
	SMOKE_BLITZ(SpriteID.SPELL_SMOKE_BLITZ),
	SHADOW_BLITZ(SpriteID.SPELL_SHADOW_BLITZ),
	BLOOD_BLITZ(SpriteID.SPELL_BLOOD_BLITZ),
	ICE_BLITZ(SpriteID.SPELL_ICE_BLITZ),
	SMOKE_BARRAGE(SpriteID.SPELL_SMOKE_BARRAGE),
	SHADOW_BARRAGE(SpriteID.SPELL_SHADOW_BARRAGE),
	BLOOD_BARRAGE(SpriteID.SPELL_BLOOD_BARRAGE),
	ICE_BARRAGE(SpriteID.SPELL_ICE_BARRAGE),
	// Lunars
	CURE_PLANT(SpriteID.SPELL_CURE_PLANT),
	MONSTER_EXAMINE(SpriteID.SPELL_MONSTER_EXAMINE),
	STAT_SPY(SpriteID.SPELL_STAT_SPY),
	FERTILE_SOIL(SpriteID.SPELL_FERTILE_SOIL),
	PLANK_MAKE(SpriteID.SPELL_PLANK_MAKE),
	CURE_OTHER(SpriteID.SPELL_CURE_OTHER),
	STAT_RESTORE_POT_SHARE(SpriteID.SPELL_STAT_RESTORE_POT_SHARE),
	BOOST_POTION_SHARE(SpriteID.SPELL_BOOST_POTION_SHARE),
	ENERGY_TRANSFER(SpriteID.SPELL_ENERGY_TRANSFER),
	HEAL_OTHER(SpriteID.SPELL_HEAL_OTHER),
	VENGEANCE_OTHER(SpriteID.SPELL_VENGEANCE_OTHER),
	// Arceuus
	BASIC_REANIMATION(SpriteID.SPELL_BASIC_REANIMATION),
	ADEPT_REANIMATION(SpriteID.SPELL_ADEPT_REANIMATION),
	EXPERT_REANIMATION(SpriteID.SPELL_EXPERT_REANIMATION),
	MASTER_REANIMATION(SpriteID.SPELL_MASTER_REANIMATION),
	RESURRECT_CROPS(SpriteID.SPELL_RESURRECT_CROPS),
	DARK_LURE(SpriteID.SPELL_DARK_LURE),
	MARK_OF_DARKNESS(SpriteID.SPELL_MARK_OF_DARKNESS),
	GHOSTLY_GRASP(SpriteID.SPELL_GHOSTLY_GRASP),
	SKELETAL_GRASP(SpriteID.SPELL_SKELETAL_GRASP),
	UNDEAD_GRASP(SpriteID.SPELL_UNDEAD_GRASP),
	INFERIOR_DEMONBANE(SpriteID.SPELL_INFERIOR_DEMONBANE),
	SUPERIOR_DEMONBANE(SpriteID.SPELL_SUPERIOR_DEMONBANE),
	DARK_DEMONBANE(SpriteID.SPELL_DARK_DEMONBANE);

	private final String name;
	final int spriteID;

	SpellSprite(int spriteID)
	{
		this(null, spriteID);
	}

	private String getName()
	{
		return name != null ? name : this.name().toLowerCase().replace("_", " ");
	}

	private static final Map<String, SpellSprite> map = new HashMap<>();

	static
	{
		for (SpellSprite spell : values())
		{
			map.put(spell.getName(), spell);
		}
	}

	static SpellSprite get(String spell)
	{
		return map.get(spell);
	}
}
